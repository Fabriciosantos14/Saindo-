#ALGORITMO DE MUTAÇÃO
import traceback
import numpy as np
import random
import matplotlib.pyplot as plt
import time
import math
import pandas as pd
from statsmodels.tsa.arima.model import ARIMA
import warnings
from sklearn.metrics import mean_squared_error, mean_absolute_error


def inicializacao_pais(aux_atributo, aux_pais, lim_i, lim_s):
    #Essa funcao serve apenas para acha numero aleatorios para o pais, na sua forma funcional precisa de entrada
    mat = np.zeros((aux_atributo, aux_pais))
    for i in range(aux_atributo):
        for j in range(aux_pais):
            mat[i][j] = random.randint(lim_i, lim_s) #funcao que acha um numero aleatorio entre esses valores
    return mat


def selecao_de_pais_funcao(x):
    # essa funcao tem como objetivo acha uma quantidade aleatoria de pais para cada individuo
    lista = list()
    quantidade_pais = random.randint(2,x) #AQUI SELECIONA A QUANTIDADE DE PAIS QUE O INDIVIDUO TERA, COM A CONDICAO DE SER NO MINIMO 2 E MAXIMO X.
    papais = list()
    for i in range(0, x):
        lista.append(i)
    for i in range(quantidade_pais):
        aux = random.choice(lista) #ESCOLHE O PAI
        papais.append(aux)
        lista.remove(aux)   #REMOVE O PAI JA ESCOLHIDO
    return papais


def heranca(papais, i, matP):
    aleatorio = random.choice(papais) #ESCOLHE O PAI A SER O DOADOR DO ATRIBUTO
    valor_heranca = matP[i][aleatorio] #PEGA O VALOR DA HERANCA
    return valor_heranca


def criar_populacao(mat_pais, numero_pais, tam_cromossomo, numero_filhos):
    matriz_familia = np.zeros((tam_cromossomo, numero_filhos + numero_pais))
    familia_sigma = np.zeros((tam_cromossomo, numero_filhos + numero_pais))
    for i in range(tam_cromossomo):  #ESSE LOOP ADICIONA OS PAIS A MATRIZ QUE CONTEM OS FILHOS PARA QUE EM OUTRA FUNCAO HAJA COMPETIÇÃO
        for j in range(numero_pais):
            matriz_familia[i][j] = mat_pais[i][j]
    selecao_pais = list()
    aleatorio_individuo = list()
    for i in range(numero_pais, numero_pais + numero_filhos): #Esse loop escolhe os pais de cada filho
        selecao_de_pais_aux = selecao_de_pais_funcao(len(mat_pais[0]))
        selecao_pais.append(selecao_de_pais_aux.copy())
    for i in range(tam_cromossomo):
        for j in range(numero_pais,numero_pais + numero_filhos):
            aux = j - numero_pais
            #Adiciona a heracao dos pais
            matriz_familia[i][j] = heranca(selecao_pais[aux], i, mat_pais)
    return matriz_familia


def mutacao(mat, total, tamanho_cromossomo):
  #O tipo de mutação é pegar um dos genes do cromossomo do individuo soma com o número +-1
  for i in range(total):
    aux = random.randint(0, tamanho_cromossomo-1)
    mat[aux][i] = abs(mat[aux][i] + random.choice([1, -1]))
  return mat
    

def indices_dos_x_menores_valores(vetor, x):
    if not vetor:
        return []  # Retorna uma lista vazia se o vetor estiver vazio

    indices = sorted(range(len(vetor)), key=lambda i: vetor[i])[:x]
    return indices


def arima_residuo(history, p, d, q, y):
    #Funcao arima

    # make first prediction
    try:
        predictions = list()
        model = ARIMA(history, order=(p,d,q))
        model_fit = model.fit()
        yhat = model_fit.forecast()[0]
        predictions.append(yhat)
        history.append(y[0])


        for i in range(1, len(y)):
            # predict
            model = ARIMA(history, order=(p,d,q))
            model_fit = model.fit()
            yhat = model_fit.forecast()[0]
            # invert transformed prediction
            predictions.append(yhat)
            # observation
            obs = y[i]
            history.append(obs)

        
        # report performance
        mse = mean_squared_error(y, predictions)
        print('\nMSE: '+str(mse))
        mae = mean_absolute_error(y, predictions)
        print('MAE: '+str(mae))
        rmse = math.sqrt(mean_squared_error(y, predictions))
        print('RMSE: '+str(rmse))
    except:
        mse = 1000
        mae = 1000
        rmse = 1000
        print('\nMSE: '+str(mse))
    return mse, mae, rmse


def funcao_fitness(matriz_populacao, total, linha,data, y):
    vetor_mse = list()
    vetor_mae = list()
    vetor_rmse = list()
    for i in range(total):
        mse, mae, rmse = arima_residuo(data, matriz_populacao[0][i], matriz_populacao[1][i], matriz_populacao[2][i], y)
        vetor_mse.append(mse) #Esse vetor é os valores das fitness dos individuos
        vetor_mae.append(mae)
        vetor_rmse.append(rmse)
    return vetor_mse, vetor_mae, vetor_rmse


def selecao(valores_avaliados, populacao,total, numero_cromossomo, numero_pai):
    #Faz o calculo da funcao fitness e ordena os melhores
    #print(f'aptidão: {valores_avaliados}')
    indices_menores = indices_dos_x_menores_valores(valores_avaliados, numero_pai)
    #print(f'Indice dos melhores: {indices_menores}')
    #OS MELHORES
    melhores_da_rodada = np.zeros((numero_cromossomo, numero_pai))
    for j in range(numero_pai): #adiciona os melhores da rodada em uma matriz
        for i in range(numero_cromossomo):
            aux = indices_menores[j]
            melhores_da_rodada[i][j] = populacao[i][aux]

    return melhores_da_rodada, valores_avaliados[indices_menores[0]], indices_menores[0]


# Função para prever valores futuros
def prever_futuro(modelo, horizonte_previsao):
    previsao_futura = modelo.forecast(steps=horizonte_previsao)
    return previsao_futura


def tabela(x, name):
    df = pd.DataFrame(x)
    df.to_excel(f'{name}.xlsx', index=False)
    print('\nARQUIVO SALVO.\n')


if __name__=='__main__':
  try:
    warnings.filterwarnings("ignore")

    inicio = time.perf_counter()
    #inicializa os dados da serie temporal
    net_df = pd.read_excel("dados.xlsx", index_col="Timestamp (end of interval)", parse_dates=True)
    train_data, test_data = net_df[0:int(len(net_df)*0.5)], net_df[int(len(net_df)*0.5):]
    train_arima = train_data['40m Wind Speed (m/s)']
    test_arima = test_data['40m Wind Speed (m/s)']
    history = [x for x in train_arima]  
    y = test_arima
    
    #   Variaveis iniciais
    pais = 5 #Número de pais na população
    filhos = 2 #número de descendentes da população
    cromossomo = 3 #Tamanho do cromossomo
    melhores_valores_funcao_fitness = list() #lista para guarda o melhor valor
    iteracoes_maximas = 5 #Número de iterações maximas que o algoritmo deve realizar 
    criterio_parada = 0 #Valor objetivo da função de aptidão
    lim_inferior = 1 #limite inferior para inicializar os genes
    lim_superior = 3 #limites superior para iniciliazar os genes
    iter = 0  #Numero de iterações
    melhor_apto = 0 #Variavel para guarda a melhor fitness encontrada
    melhor_geracao = 0 #variavel para armazenar a melhor geracao da melhor fitness
    variavel_fitness = list()
    matriz_pais = inicializacao_pais(cromossomo, pais, lim_inferior, lim_superior)
    
    dados_tabela = list()
     
    while 1:
        populacao = criar_populacao(matriz_pais, pais, cromossomo, filhos)
        populacao = mutacao(populacao, pais + filhos, cromossomo)
        print(populacao)
        resultado_fitness, valor_mae, valor_rmse = funcao_fitness(populacao, pais + filhos, cromossomo, history, y)
        matriz_pais, mais_forte_geracao_atual, indice_melhor_geracao = selecao(resultado_fitness, populacao, pais + filhos, cromossomo, pais)
        variavel_fitness.append(mais_forte_geracao_atual)
        if mais_forte_geracao_atual < melhor_apto or iter == 0: #if para armazenar o melhor algoritmo
            cromossomo_do_mais_apto = matriz_pais[:,0]
            melhor_apto = mais_forte_geracao_atual
            geracao = [iter,cromossomo_do_mais_apto, melhor_apto, valor_mae[indice_melhor_geracao], valor_rmse[indice_melhor_geracao]]
            dados_tabela.append(geracao)
            melhor_geracao = iter

        print(cromossomo_do_mais_apto)
        print()

        if iter >= iteracoes_maximas or mais_forte_geracao_atual <= criterio_parada:  #if para parar o algoritmo
            print(f'Os melhores parametros para a função ARIMA foram:\n{cromossomo_do_mais_apto}\nObtidos na geração:\n{melhor_geracao}')
            print(f'Com valor do erro medio quadratico de: {melhor_apto} ')
            
            predictions = list()
            model = ARIMA(history, order=(cromossomo_do_mais_apto[0], cromossomo_do_mais_apto[1], cromossomo_do_mais_apto[2]))
            model_fit = model.fit()
            yhat = model_fit.forecast()[0]
            predictions.append(yhat)
            history.append(y[0])


            for i in range(1, len(y)):
                # predict
                model = ARIMA(history, order=(cromossomo_do_mais_apto[0], cromossomo_do_mais_apto[1], cromossomo_do_mais_apto[2]))
                model_fit = model.fit()
                yhat = model_fit.forecast()[0]
                # invert transformed prediction
                predictions.append(yhat)
                # observation
                obs = y[i]
                history.append(obs)
                
                
            # report performance
            mse = mean_squared_error(y, predictions)
            print('MSE: '+str(mse))
            mae = mean_absolute_error(y, predictions)
            print('MAE: '+str(mae))
            rmse = math.sqrt(mean_squared_error(y, predictions))
            print('RMSE: '+str(rmse))

            
            fim = time.perf_counter()
            tempo = round(fim - inicio, 15)
            print(model_fit.summary())
            print(f'Tempo de execução: {tempo}')

            tabela(dados_tabela, 'arima&ag')

            ###
            plt.figure(figsize=(16,8))
            plt.plot(net_df.index[-600:], net_df['40m Wind Speed (m/s)'].tail(600), color='green', label = 'Real')
            plt.plot(test_data.index, y, color = 'red', label = 'Real test')
            plt.plot(test_data.index, predictions, color = 'blue', label = 'Predicção')
            plt.title('Wind Speed')
            plt.xlabel('Time')
            plt.ylabel('Wind')
            plt.legend()
            plt.grid(True)
            plt.savefig('arima_model.pdf')
            plt.show()
            break

        iter = iter + 1 #Contador

  except Exception as erro:
      print('ERRO!!!\n%s'%(erro.args))
      traceback.print_exc()
